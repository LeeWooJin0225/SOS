package com.sist.web.controller;

import java.io.File;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.sist.common.util.FileUtil;
import com.sist.common.util.StringUtil;
import com.sist.web.model.Paging;
import com.sist.web.model.PrevQue;
import com.sist.web.model.PrevQue_Easy_Hard;
import com.sist.web.model.Response;
import com.sist.web.model.User;
import com.sist.web.service.AccountService;
import com.sist.web.service.PrevQueListService;
import com.sist.web.util.CookieUtil;
import com.sist.web.util.HttpUtil;

@Controller("prevQueListController")
public class PrevQueListController {

	private static Logger logger = LoggerFactory.getLogger(PrevQueListController.class);

	@Autowired
	private PrevQueListService prevQueListService;

	@Autowired
	private AccountService accountService;

	@Value("#{env['auth.cookie.name']}")
	private String AUTH_COOKIE_NAME;

	@Value("#{env['exam.save.dir']}")
	private String EXAM_SAVE_DIR;

	@Value("#{env['ans.save.dir']}")
	private String ANS_SAVE_DIR;

	// ListCount pageCount 상수 정의
	/*
	 * private static final int LIST_COUNT = 10; // 한 페이지의 게시물 수
	 */
	private static final int PAGE_COUNT = 10; // 페이징 수

	/*===================================================
	 *    기출문제 화면
	 ===================================================*/
	@RequestMapping(value = "/dataroom/prevQueList")
	public String prevQueList(ModelMap model, HttpServletRequest request, HttpServletResponse response) {

		String userId = CookieUtil.getHexValue(request, AUTH_COOKIE_NAME); // 쿠키에서 userId 가져오기
		model.addAttribute("userId", userId); // JSP로 전달

		// 조회 항목 (1: 작성자, 2: 제목, 3: 내용)
		String searchType = HttpUtil.get(request, "searchType", "");
		String searchValue = HttpUtil.get(request, "searchValue", "");
		long examSeq = HttpUtil.get(request, "examSeq", (long) 0);
		long curPage = HttpUtil.get(request, "curPage", (long) 1);
		int classCode = HttpUtil.get(request, "classCode", 1);
		int options = HttpUtil.get(request, "options", 1);
		int listCount = HttpUtil.get(request, "listCount", 10);

		logger.debug("examSeq from request: " + examSeq); // examSeq 값 확인

		long totalCount = 0;
		long easyCnt = 0;
		long hardCnt = 0;
		List<PrevQue> list = null;
		PrevQue search = new PrevQue();
		Paging paging = null;

		if (!StringUtil.isEmpty(searchType) && !StringUtil.isEmpty(searchValue)) {
			search.setSearchType(searchType);
			search.setSearchValue(searchValue);
		}
		search.setOptions(options);
		search.setClassCode(classCode);

		totalCount = prevQueListService.prevQueListCount(search);

		if (totalCount > 0) {
			paging = new Paging("/dataroom/prevQueList", totalCount, listCount, PAGE_COUNT, curPage, "curPage");
			search.setStartRow(paging.getStartRow());
			search.setEndRow(paging.getEndRow());
			list = prevQueListService.prevQueList(search);

			PrevQue_Easy_Hard prevQue_Easy_Hard = new PrevQue_Easy_Hard();
			// 쉬워요, 어려워요 카운트 가져오기
			for (int i = 0; i < list.size(); i++) {
				logger.debug("" + list.get(i).getExamSeq());

				prevQue_Easy_Hard.setExamSeq(list.get(i).getExamSeq());
				easyCnt = prevQueListService.easyCnt(prevQue_Easy_Hard);
				hardCnt = prevQueListService.hardCnt(prevQue_Easy_Hard);
				list.get(i).setEasyCnt(easyCnt);
				list.get(i).setHardCnt(hardCnt);
			}
		}

		// 모델에 easyCnt와 hardCnt 추가
		model.addAttribute("examSeq", examSeq);
		model.addAttribute("easyCnt", easyCnt);
		model.addAttribute("hardCnt", hardCnt);
		model.addAttribute("list", list);
		model.addAttribute("options", options);
		model.addAttribute("searchType", searchType);
		model.addAttribute("searchValue", searchValue);
		model.addAttribute("curPage", curPage);
		model.addAttribute("paging", paging);
		model.addAttribute("classCode", classCode);
		model.addAttribute("totalCount", totalCount);
		model.addAttribute("listCount", listCount);

		return "/dataroom/prevQueList";
	}

	@RequestMapping(value = "/dataroom/easyHardInsert", method = RequestMethod.POST)
	@ResponseBody
	public Response<Object> easyHardInsert(HttpServletRequest request, HttpServletResponse response) {
		Response<Object> ajaxResponse = new Response<Object>();

		String cookieUserId = CookieUtil.getHexValue(request, AUTH_COOKIE_NAME);
		long examSeq = HttpUtil.get(request, "examSeq", 0L);
		String status = HttpUtil.get(request, "status", "");

		logger.debug("쿠키에서 가져온 userId: " + cookieUserId);

		if (!StringUtil.isEmpty(cookieUserId)) {
			User user = accountService.userSelect(cookieUserId);
			logger.debug("userSelect 결과: " + user);

			if (user != null && examSeq > 0) {
				PrevQue prevQue = prevQueListService.prevQueSelect(examSeq);
				if (prevQue != null) {
					PrevQue_Easy_Hard prevQue_Easy_Hard = new PrevQue_Easy_Hard();
					prevQue_Easy_Hard.setExamSeq(examSeq);
					prevQue_Easy_Hard.setUserId(cookieUserId);
					prevQue_Easy_Hard.setStatus(status);

					List<PrevQue_Easy_Hard> list = prevQueListService.easyHardSelect(prevQue_Easy_Hard);

					if (list == null || list.isEmpty()) {
						if (prevQueListService.easyHardInsert(prevQue_Easy_Hard) > 0) {

							long count = prevQueListService.easyHardSelect2(examSeq);
							ajaxResponse.setResponse(0, "success", count);
						} else {
							ajaxResponse.setResponse(-99, "error(2)");
						}
					} else {
						// 이미 상태가 있는 경우
						PrevQue_Easy_Hard existingRecord = list.get(0); // 사용자의 기존 기록
						if (existingRecord.getStatus().equals(status)) {
							// 같은 상태를 다시 선택한 경우 삭제
							prevQueListService.easyHardDelete(prevQue_Easy_Hard);
							long count = prevQueListService.easyHardSelect2(examSeq);
							ajaxResponse.setResponse(-1, "success", count);
						} else {
							// 다른 상태를 선택한 경우 에러 응답
							ajaxResponse.setResponse(-3, "You cannot vote for both '쉬워요' and '어려워요'.");
						}
					}
				}
			} else {
				ajaxResponse.setResponse(-2, "invalid examSeq or user");
			}
		} else {
			ajaxResponse.setResponse(400, "user not authenticated");
		}

		return ajaxResponse;
	}

	/////////////////////////////////////// 기출문제
	/////////////////////////////////////// 다운로드////////////////////////////////////////////////////////

	// 기출문제 다운
	@RequestMapping(value = "/dataroom/examdownload", method = RequestMethod.GET)
	public ModelAndView examdownload(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView modelAndView = null;

		// examSeq 파라미터를 받음
		long examSeq = HttpUtil.get(request, "examSeq", (long) 0);

		// fileType 파라미터를 받아서 pdf 파일을 처리하도록
		String fileType = HttpUtil.get(request, "fileType", "exam");
		if (examSeq > 0) {
			PrevQue prevQue = prevQueListService.prevQueSelect(examSeq);

			if (prevQue != null) {
				String fileName = prevQue.getExamTestFileName();
				logger.debug("File name found: " + fileName);

				// fileType에 맞춰 확장자 추가
				if ("pdf".equals(fileType)) {
					fileName += ".pdf";
				}

				// 실제 파일 경로를 `webapp/resources/file/exam/`로 수정
				/*
				 * String path = request.getServletContext().getRealPath(EXAM_SAVE_DIR +
				 * FileUtil.getFileSeparator() + fileName); logger.debug("File path: " + path);
				 * // 실제 경로 로그 출력
				 */
				File file = new File(EXAM_SAVE_DIR + FileUtil.getFileSeparator() + fileName);

				if (file.exists() && file.isFile()) {
					logger.debug("File exists, proceeding with download.");
					modelAndView = new ModelAndView();
					modelAndView.setViewName("fileDownloadView");
					modelAndView.addObject("file", file);
					modelAndView.addObject("fileName", fileName);
				}
			}
		}

		return modelAndView;
	}

	// 답안지 다운
	@RequestMapping(value = "/dataroom/ansdownload", method = RequestMethod.GET)
	public ModelAndView ansdownload(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView modelAndView = null;

		// examSeq 파라미터를 받음
		long examSeq = HttpUtil.get(request, "examSeq", (long) 0);

		// fileType 파라미터를 받아서 pdf 파일을 처리하도록
		String fileType = HttpUtil.get(request, "fileType", "exam");
		if (examSeq > 0) {
			PrevQue prevQue = prevQueListService.prevQueSelect(examSeq);

			if (prevQue != null) {
				String fileName = prevQue.getExamAnsFileName();
				logger.debug("File name found: " + fileName);

				// fileType에 맞춰 확장자 추가
				if ("png".equals(fileType)) {
					fileName += ".png";
				}

				// 실제 파일 경로를 `webapp/resources/file/exam/`로 수정
				/*
				 * String path = request.getServletContext().getRealPath(EXAM_SAVE_DIR +
				 * FileUtil.getFileSeparator() + fileName); logger.debug("File path: " + path);
				 * // 실제 경로 로그 출력
				 */
				File file = new File(ANS_SAVE_DIR + FileUtil.getFileSeparator() + fileName);

				if (file.exists() && file.isFile()) {
					logger.debug("File exists, proceeding with download.");
					modelAndView = new ModelAndView();
					modelAndView.setViewName("fileDownloadView");
					modelAndView.addObject("file", file);
					modelAndView.addObject("fileName", fileName);
				}
			}
		}

		return modelAndView;
	}

}
